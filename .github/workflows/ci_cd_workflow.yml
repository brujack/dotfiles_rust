name: CI/CD Workflow

on:
  push:
    branches:
      - main

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary_name: setup_env-linux-x86-64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            binary_name: setup_env-linux-arm
          - os: macos-latest
            target: x86_64-apple-darwin
            binary_name: setup_env-macos-x86-64
          - os: macos-latest
            target: aarch64-apple-darwin
            binary_name: setup_env-macos-arm

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Install dependencies for ARM builds (Ubuntu)
      if: matrix.os == 'ubuntu-latest' && matrix.target == 'aarch64-unknown-linux-gnu'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu libc6-dev-arm64-cross

    - name: Add Rust target
      run: rustup target add ${{ matrix.target }}

    - name: Build project
      run: |
        cargo build --release --target ${{ matrix.target }}
      env:
        CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc

    - name: Install Apple Code Signing Certificate
      if: startsWith(matrix.target, 'x86_64-apple-darwin') || startsWith(matrix.target, 'aarch64-apple-darwin')
      run: |
        echo "${{ secrets.APPLE_CERTIFICATE }}" | base64 --decode > apple_certificate.p12
        security create-keychain -p "" build.keychain
        security import apple_certificate.p12 -k build.keychain -P "${{ secrets.APPLE_CERT_PASSWORD }}" -T /usr/bin/codesign
        security list-keychain -s build.keychain
        security set-keychain-settings -t 3600 -u build.keychain
        security unlock-keychain -p "" build.keychain

    - name: Sign Binary Without Timestamp
      if: startsWith(matrix.target, 'x86_64-apple-darwin') || startsWith(matrix.target, 'aarch64-apple-darwin')
      run: |
          echo "Starting signing without timestamp at $(date)"
          codesign --verbose --force --sign "Developer ID Application" ./target/${{ matrix.target }}/release/setup_env
          echo "Finished signing without timestamp at $(date)"

    - name: Verify Signature
      if: startsWith(matrix.target, 'x86_64-apple-darwin') || startsWith(matrix.target, 'aarch64-apple-darwin')
      run: |
        codesign --verify --deep --strict --verbose=2 ./target/${{ matrix.target }}/release/setup_env

    - name: Move Binary to Artifacts Directory
      run: |
        mkdir -p ./${{ matrix.binary_name }}
        mv target/${{ matrix.target }}/release/setup_env ./${{ matrix.binary_name }}/${{ matrix.binary_name }}

    - name: Upload Binary
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.binary_name }}
        path: ./${{ matrix.binary_name }}/${{ matrix.binary_name }}

  release:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Debug List Files After Download
      run: |
        echo "Listing all files in the current directory:"
        find .

    - name: Set up Git Identity
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"

    - name: Save New Tag to Environment
      id: tag-info
      run: |
        git fetch --tags
        DATE=$(date +"%Y%m%d")
        EXISTING_TAGS=$(git tag | grep "^${DATE}" || true)

        if [ -z "$EXISTING_TAGS" ]; then
            NEW_TAG="${DATE}-1"
        else
            MAX_INCREMENT=$(echo "$EXISTING_TAGS" | awk -F '-' '{print $2}' | sort -nr | head -n1 || echo "0")
            NEW_INCREMENT=$((MAX_INCREMENT + 1))
            NEW_TAG="${DATE}-${NEW_INCREMENT}"
        fi

        echo "NEW_TAG=$NEW_TAG" >> $GITHUB_ENV
        echo "Created tag: $NEW_TAG"

    - name: Create and Push Tag
      run: |
        NEW_TAG=${{ env.NEW_TAG }}
        git tag -a "$NEW_TAG" -m "Release $NEW_TAG"
        git push origin "$NEW_TAG"

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ env.NEW_TAG }}
        files: |
          ./setup_env-macos-arm/setup_env-macos-arm
          ./setup_env-macos-x86-64/setup_env-macos-x86-64
          ./setup_env-linux-x86-64/setup_env-linux-x86-64
          ./setup_env-linux-arm/setup_env-linux-arm
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
